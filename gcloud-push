#!/bin/sh

# Exmaple
#   ./gcloud-push eloyt.com eloyt-149708 staging-v1
#

source ./secrets

function log {
    STATUS=$1
    MSG=$2

    if [ ! -t 0 ]; then
        INPUT=$(cat)
    else
        INPUT=""
    fi

    case "$STATUS" in
        warning) COLOR_CODE='93'; ;;
        success) COLOR_CODE='92'; ;;
        error)   COLOR_CODE='91'; ;;
        info)    COLOR_CODE='94'; ;;
        *)       COLOR_CODE='39'; MSG=$1 ;;
    esac

    RESET="\e[0m";
    COLOR="\e[0;${COLOR_CODE}m";

    if [[ "$OSTYPE" == "darwin"* ]]; then
        RESET="\x1B[0m";
        COLOR="\x1B[0;${COLOR_CODE}m";
    fi

    echo ${COLOR}${MSG}${INPUT}${RESET}
}

export PROJECT_DIR=$1
export DEFAULT_TAG=$2

export DOCKER_LOCAL_IMAGE="eloyt/$PROJECT_DIR"
export DOCKER_GCLOUD_IMAGE="asia.gcr.io/$GCLOUD_PROJECT_ID/$PROJECT_DIR"

log "success" "Build Image"

cd services/$PROJECT_DIR

docker build . -f Dockerfile.prod -t $DOCKER_LOCAL_IMAGE

docker tag $DOCKER_LOCAL_IMAGE $DOCKER_GCLOUD_IMAGE:$DEFAULT_TAG

gcloud docker -- push $DOCKER_GCLOUD_IMAGE:$DEFAULT_TAG

cd - 1> /dev/null 2> /dev/null

# Update the Replication controller
if [ -f kube/${PROJECT_DIR}/replication-controller.yaml ];
then
    log "success" "Kubernetes Update Replication Controller"

    envsubst < kube/${PROJECT_DIR}/replication-controller.yaml | kubectl apply -f -
fi

# Update the Service
if [ -r kube/${PROJECT_DIR}/service.yaml ];
then
    log "success" "Kubernetes Update Service"

    envsubst < kube/${PROJECT_DIR}/service.yaml | kubectl apply -f -
fi

