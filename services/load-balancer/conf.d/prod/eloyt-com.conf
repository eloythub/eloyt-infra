upstream upsite {
    server el-eloyt-com;
}

server {
    listen 80;

    server_name www.eloyt.com;

    return 301 $scheme://eloyt.com$request_uri;
}

server {
    listen 80;

    server_name eloyt.com;

    location /.well-known/acme-challenge/ {

        # Set correct content type. According to this:
        # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
        # Current specification requires "text/plain" or no content header at all.
        # It seems that "text/plain" is a safe option.
        default_type "text/plain";

        # This directory must be the same as in /etc/letsencrypt/cli.ini
        # as "webroot-path" parameter. Also don't forget to set "authenticator" parameter
        # there to "webroot".
        # Do NOT use alias, use root! Target directory is located here:
        # /var/www/common/letsencrypt/.well-known/acme-challenge/
        # root /etc/letsencrypt/.well-known/acme-challenge/;
        alias /etc/letsencrypt/.well-known/acme-challenge/;

        allow all;
    }

    location / {
        proxy_redirect      off;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
        proxy_set_header    Host                $http_host;
        proxy_set_header    X-NginX-Proxy       true;
        proxy_set_header    Connection          "";
        proxy_http_version  1.1;

        proxy_pass          http://upsite;

       # return 301 https://eloyt.com$request_uri;
    }
}

server {
    listen              443 ssl http2;

    server_name         eloyt.com;

    ssl on;

    ssl_certificate     /ssl-certs/eloyt.com.crt;
    ssl_certificate_key /ssl-certs/eloyt.com.key;
    # ssl_certificate /etc/letsencrypt/live/eloyt.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/eloyt.com/privkey.pem;

    ssl_session_timeout 5m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers on;

    location / {
        proxy_redirect      off;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
        proxy_set_header    Host                $http_host;
        proxy_set_header    X-NginX-Proxy       true;
        proxy_set_header    Connection          "";
        proxy_http_version  1.1;

        proxy_pass          http://upsite;
    }

    location /status {
        add_header Content-Type text/plain;

        return 200 'nginx is healthy';
    }
}
